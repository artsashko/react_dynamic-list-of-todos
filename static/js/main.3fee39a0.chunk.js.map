{"version":3,"sources":["api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["BASE_URL","getTodos","fetch","then","response","json","getUser","id","TodoList","state","queryTitle","conditionFilter","setQueryTitle","query","setState","setConditionFilter","option","this","props","todos","selectedUserId","userSelector","randomizeOrder","className","name","defaultValue","onChange","event","target","value","map","key","type","placeholder","onClick","filter","todo","title","includes","completed","userId","checked","readOnly","React","Component","CurrentUser","user","data","prevProps","clear","email","phone","App","randomizedTodos","loadTodos","promise","a","setSelectedUser","randomId","Math","random","sort","b","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3fee39a0.chunk.js","sourcesContent":["const BASE_URL = `https://mate-api.herokuapp.com`;\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos/`)\n    .then(response => response.json());\n}\n\nexport function getUser(id) {\n  return fetch(`${BASE_URL}/users/${id}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    queryTitle: '',\n    conditionFilter: 'all',\n  }\n\n  setQueryTitle = (query) => {\n    this.setState({\n      queryTitle: query,\n    });\n  };\n\n  setConditionFilter = (option) => {\n    this.setState({\n      conditionFilter: option,\n    });\n  };\n\n  render() {\n    const { todos, selectedUserId, userSelector, randomizeOrder } = this.props;\n    const { queryTitle, conditionFilter } = this.state;\n    const optionsForFilter = ['all', 'active', 'completed'];\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <div className=\"TodoList__top\">\n            <select\n              name=\"perPage\"\n              defaultValue={conditionFilter}\n              onChange={event => this.setConditionFilter(event.target.value)}\n              className=\"page-selector\"\n            >\n              {optionsForFilter.map(value => (\n                <option value={value} key={value}>\n                  {value}\n                </option>\n              ))}\n            </select>\n            <input\n              type=\"text\"\n              onChange={event => this.setQueryTitle(event.target.value)}\n              className=\"TodoList__input\"\n              placeholder=\"Search by title\"\n            />\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => randomizeOrder()}\n            >\n              Randomize\n            </button>\n          </div>\n          <ul className=\"TodoList__list\">\n            {todos.filter((todo) => {\n              if (todo.title) {\n                return todo.title.includes(queryTitle);\n              }\n\n              return false;\n            })\n              .filter((todo) => {\n                switch (conditionFilter) {\n                  case ('completed'):\n                    return todo.completed;\n                  case ('active'):\n                    return !todo.completed;\n                  default:\n                    return true;\n                }\n              })\n              .map(({ id, userId, title, completed }) => (\n                <li\n                  key={id}\n                  className={`TodoList__item ${completed\n                    ? 'TodoList__item--checked'\n                    : 'TodoList__item--unchecked'\n                  }`}\n                >\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={completed}\n                      readOnly\n                    />\n                    <p>{title}</p>\n                  </label>\n\n                  <button\n                    className={`TodoList__user-button button ${\n                      selectedUserId === userId\n                        ? 'TodoList__user-button--selected'\n                        : ''\n                    }`}\n                    type=\"button\"\n                    onClick={() => userSelector(userId)}\n                  >\n                    User&nbsp;#\n                    {userId}\n                  </button>\n                </li>\n              ))\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  userSelector: PropTypes.func.isRequired,\n  randomizeOrder: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: [],\n  };\n\n  componentDidMount() {\n    const { userId } = this.props;\n\n    getUser(userId)\n      .then((user) => {\n        this.setState({ user: user.data });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { userId } = this.props;\n\n    if (prevProps.userId === userId) {\n      return;\n    }\n\n    getUser(userId)\n      .then((user) => {\n        this.setState({ user: user.data });\n      });\n  }\n\n  render() {\n    const { userId, clear } = this.props;\n    const { user } = this.state;\n    const { name, email, phone } = user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            { userId }\n          </span>\n          <button\n            className=\"button button-clear\"\n            type=\"button\"\n            onClick={clear}\n          >\n            Clear\n          </button>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    randomizedTodos: null,\n  };\n\n  componentDidMount() {\n    this.loadTodos(getTodos);\n  }\n\n  loadTodos = async(promise) => {\n    const response = await promise();\n\n    this.setState({\n      todos: response.data,\n    });\n  };\n\n  setSelectedUser = (user) => {\n    this.setState({ selectedUserId: user });\n  }\n\n  clear = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  randomizeOrder = () => {\n    const { todos } = this.state;\n\n    this.setState({ randomizedTodos: todos.map(todo => ({\n      ...todo,\n      randomId: Math.random(),\n    })).sort((a, b) => a.randomId - b.randomId) });\n  };\n\n  render() {\n    const { todos, selectedUserId, randomizedTodos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={randomizedTodos || todos}\n            userSelector={this.setSelectedUser}\n            selectedUserId={selectedUserId}\n            setQueryTitle={this.setQueryTitle}\n            randomizeOrder={this.randomizeOrder}\n          />\n        </div>\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clear={this.clear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}